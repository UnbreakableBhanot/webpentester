import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin
import re
import random
import string

class VulnerabilityScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
        self.visited_urls = set()
        self.vulnerabilities = []

    def is_url_internal(self, url):
        return urlparse(url).netloc == urlparse(self.target_url).netloc

    def crawl_and_scan(self, url):
        if url in self.visited_urls:
            return
        self.visited_urls.add(url)
        
        print(f"Scanning URL: {url}")

        try:
            response = self.session.get(url)
            response.raise_for_status()  # Raise an exception for HTTP errors
            if response.status_code == 200:
                html_content = response.text
                soup = BeautifulSoup(html_content, 'html.parser')

                # Scanning for vulnerabilities
                self.scan_for_xss(url, html_content)
                self.scan_for_sql_injection(url, html_content)
                self.scan_for_command_injection(url, html_content)
                self.scan_for_path_traversal(url, html_content)
          
                links = soup.find_all('a', href=True)
                for link in links:
                    new_url = urljoin(url, link['href'])
                    if self.is_url_internal(new_url):
                        self.crawl_and_scan(new_url)

          

        except requests.exceptions.RequestException as e:
            print("Error:", e)

    def scan_for_xss(self, url, content):
        xss_payloads = [
            '<script>alert("XSS")</script>',
            '<img src="x" onerror="alert(\'XSS\')">',
         
        ]
        vulnerabilities = []
        for payload in xss_payloads:
            if payload in content:
                vulnerabilities.append(payload)
        if vulnerabilities:
            self.vulnerabilities.append((url, "XSS", vulnerabilities))

    def scan_for_sql_injection(self, url, content):
  
        if 'error' in content.lower():
            self.vulnerabilities.append((url, "SQL Injection", ["Potential SQL Injection"]))

    def scan_for_command_injection(self, url, content):
       
        if 'system(' in content.lower():
            self.vulnerabilities.append((url, "Command Injection", ["Potential Command Injection"]))

    def scan_for_path_traversal(self, url, content):
        if '../' in content:
            self.vulnerabilities.append((url, "Path Traversal", ["Potential Path Traversal"]))


    def generate_random_payload(self, length=8):
        return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))

    def exploit_vulnerabilities(self):
        for url, vulnerability_type, payloads in self.vulnerabilities:
            if vulnerability_type == "XSS":
                for payload in payloads:
                    exploit_url = url.replace("XSS", payload)
                    self.visited_urls.discard(exploit_url)  
                    self.crawl_and_scan(exploit_url)
         
    def print_vulnerabilities(self):
        if self.vulnerabilities:
            print("Vulnerabilities found:")
            for url, vulnerability_type, payloads in self.vulnerabilities:
                print(f"URL: {url}")
                print(f"Vulnerability: {vulnerability_type}")
                print("Payloads:")
                for payload in payloads:
                    print("-", payload)
        else:
            print("No vulnerabilities found.")

if __name__ == "__main__":
    target_url = input("Enter the target website URL: ")

    scanner = VulnerabilityScanner(target_url)
    print("Starting vulnerability scan...")
    scanner.crawl_and_scan(target_url)
    scanner.exploit_vulnerabilities()
    print("Vulnerability scan completed.")
    scanner.print_vulnerabilities()
